// SPDX-FileCopyrightText: Â© 2022 Dai Foundation <www.daifoundation.org>
// SPDX-License-Identifier: GPL-3.0-or-later
pragma solidity 0.8.13;

import {TimedJob} from "./base/TimedJob.sol";

/**
 * @dev interface for the RWARegistry
 */
interface RWARegistyLike {
    function list() external view returns (bytes32[] memory);
    function count() external view returns (uint256);
    function getComponent(bytes32 ilk_, bytes32 name_) external view returns (address addr, uint88 variant);
}

/**
 * @dev interface for DaiLike
 */
interface DaiLike {
    function balanceOf(address) external view returns (uint256);
}

/**
* @dev inteface for RWaUrn2Like
*/
interface RWAUrn2Like {
    function wipe(uint256 wad) external; 
}

/**
 * @title Scheduled Urn Wipe Job
 * @author David Krett <david@w2d.co>
 * @notice Scheduled job to wipe a designated urn on a periodic basis.
 */

contract ScheduledUrnWipeJob {

    RWARegistyLike public immutable rwaRegistry;
    RWAUrn2Like public rwaUrn2;
    DaiLike public dai;

    constructor(address _sequencer, address _rwaRegistry, address _rwaUrn2, address _dai, uint256 _duration) {
        rwaRegistry = RWARegistyLike(_rwaRegistry);
        rwaUrn2 = RWAUrn2Like(_rwaUrn2);
        dai = DaiLike(_dai);
    }

    /**
     * @notice Checks
     * @dev Scheduled job to wipe a designated urn on a periodic basis.
     */
    function shouldUpdate() internal override view returns (bool) {
        // check if the registry contains ilks
        if (rwaRegistry.count() = 0) return false;
        // check if any of the ilks are using RWAUrn2 components
        for (uint256 i = 0; i < rwaRegistry.count(); i++) {
            bytes32 ilk = rwaRegistry.list()[i];
            if (rwaRegistry.getComponent(ilk, "RWAUrn2") != 0) return true;
        }
        return true;
    }

    function update() internal override {
        // get the list of urns from the registry 
        // check the balance of each urn 
        for (bytes32 ilk;  rwaRegistry.list();) {
            uint256 wad = dai.balanceOf(rwaUrn2.address);
            if (wad > 0) {
                rwaUrn2.wipe(wad);
            }
        }   
    }





}




